{
  "address": "0xc3d45Ad1C96c071109956C8f07d8d5F5264e24ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initNotRevealedUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfWLAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getWLAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressesWL",
          "type": "address"
        }
      ],
      "name": "isAddressWL",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses_",
          "type": "address[]"
        }
      ],
      "name": "setAddressesWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxPerWallet",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newPayMethod",
          "type": "bool"
        }
      ],
      "name": "setPayMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setWLStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soldItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wlStage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79a7d1939c335f63264d9e7a8c4645f1136da63ad9dc9967be12fbbc6c8cb46a",
  "receipt": {
    "to": null,
    "from": "0xD02a0D34a632e09B6D1DA516f318022aE9BAb8cF",
    "contractAddress": "0xc3d45Ad1C96c071109956C8f07d8d5F5264e24ba",
    "transactionIndex": 67,
    "gasUsed": "3574879",
    "logsBloom": "0x
    "blockHash": "0x720099eb9daf3da573d532d0df092586fa62d71c92ffda2d00f65b3b79e5ee50",
    "transactionHash": "0x79a7d1939c335f63264d9e7a8c4645f1136da63ad9dc9967be12fbbc6c8cb46a",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 8691372,
        "transactionHash": "0x79a7d1939c335f63264d9e7a8c4645f1136da63ad9dc9967be12fbbc6c8cb46a",
        "address": "0xc3d45Ad1C96c071109956C8f07d8d5F5264e24ba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d02a0d34a632e09b6d1da516f318022ae9bab8cf"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x720099eb9daf3da573d532d0df092586fa62d71c92ffda2d00f65b3b79e5ee50"
      }
    ],
    "blockNumber": 8691372,
    "cumulativeGasUsed": "11764790",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CyDreadz",
    "Cy",
    "https://gateway.pinata.cloud/ipfs/QmdXM5y8p28HM2KPinHTJFGz81ca3zT1whQAoRg2Hemzo5/",
    "https://gateway.pinata.cloud/ipfs/QmXPVdvebcZRzzkkf6qmoPUb38hpJjv9xM9JhUAbcsKQrw"
  ],
  "numDeployments": 3,
  "solcInputHash": "12287277a9567a3286c93b8a478dda10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initNotRevealedUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfWLAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getWLAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesWL\",\"type\":\"address\"}],\"name\":\"isAddressWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"}],\"name\":\"setAddressesWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newPayMethod\",\"type\":\"bool\"}],\"name\":\"setPayMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWLStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mint.sol\":\"CyDreadzMintContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// creator: memonadil.eth#4578\\n\\n// File: @openzeppelin/contracts/utils/math/Math.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(\\n        uint256 a,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return\\n                result +\\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 /* firstTokenId */,\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < ERC721.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        address from,\\n        uint256 tokenId\\n    ) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\\n// File: @openzeppelin/contracts/token/common/ERC2981.sol\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) /\\n            _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(\\n            feeNumerator <= _feeDenominator(),\\n            \\\"ERC2981: royalty fee will exceed salePrice\\\"\\n        );\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(\\n            feeNumerator <= _feeDenominator(),\\n            \\\"ERC2981: royalty fee will exceed salePrice\\\"\\n        );\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\\n// File: contracts/cydreadz_mint_v1.sol\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract CyDreadzMintContract is ERC721Enumerable, ERC2981, Ownable {\\n    using Strings for uint256;\\n    using SafeERC20 for IERC20;\\n    AggregatorV3Interface internal priceFeed;\\n\\n    uint256 public version = 1;\\n    string public baseURI;\\n    string public baseExtension = \\\".json\\\";\\n    uint256 public cost = 0.1 ether; // Change on DEPLOY !!\\n    uint256 public maxSupply = 2222;\\n    uint256 public maxMintAmount = 4;\\n    uint256 public maxPerWallet = 4;\\n    bool public wlStage = false;\\n    bool public paused = false;\\n    bool public revealed = true;\\n    bool public payMethod = true; // true: Native coin false: Stable(USDT) coin\\n    address public USDT = 0xBA62BCfcAaFc6622853cca2BE6Ac7d845BC0f2Dc;\\n    string public notRevealedUri;\\n    mapping(address => uint256) public mintCounter;\\n    address[] wlAddresses;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        string memory _initNotRevealedUri\\n    ) ERC721(_name, _symbol) {\\n        _setDefaultRoyalty(0x713AaEB4e7aA375343EA039C71D01790958cb26d, 1000); // 10%\\n        setBaseURI(_initBaseURI);\\n        setNotRevealedURI(_initNotRevealedUri);\\n\\n        priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n\\n        wlAddresses.push(owner());\\n    }\\n\\n    function getLatestPrice() public view returns (int) {\\n        // prettier-ignore\\n        (\\n            /* uint80 roundID */,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n    function setAddressesWL(address[] memory addresses_) public onlyOwner {\\n        for (uint256 i = 0; i < addresses_.length; i++) {\\n            wlAddresses.push(addresses_[i]);\\n        }\\n    }\\n\\n    function setPayMethod(bool _newPayMethod) public onlyOwner {\\n        payMethod = _newPayMethod;\\n    }\\n\\n    function isAddressWL(address addressesWL) public view returns (bool) {\\n        for (uint256 i = 0; i < wlAddresses.length; i++) {\\n            if (wlAddresses[i] == addressesWL) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getNumberOfWLAddresses() public view returns (uint256) {\\n        return wlAddresses.length;\\n    }\\n\\n    function getWLAddress(uint256 i) public view returns (address) {\\n        return wlAddresses[i];\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721Enumerable, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function setDefaultRoyalty(\\n        address _receiver,\\n        uint96 _feeNumerator\\n    ) external onlyOwner {\\n        super._setDefaultRoyalty(_receiver, _feeNumerator);\\n    }\\n\\n    function deleteDefaultRoyalty() external onlyOwner {\\n        super._deleteDefaultRoyalty();\\n    }\\n\\n    // internal\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function remainingItems() public view returns (uint256) {\\n        return maxSupply - totalSupply();\\n    }\\n\\n    function soldItems() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function getUsdtAmount() public view returns (uint256) {\\n        int ethPrice = getLatestPrice();\\n        return cost * uint256(ethPrice) / (10 ** 8);\\n    }\\n\\n    // public\\n    function mint(uint256 _mintAmount) public payable {\\n        uint256 supply = totalSupply();\\n        address buyerWalletAddress = _msgSender();\\n        require(!paused, \\\"Mint is currently paused.\\\");\\n        require(_mintAmount > 0, \\\"Mint amount must be above 0.\\\");\\n        require(_mintAmount <= maxMintAmount, \\\"User exceeds max per TX.\\\");\\n        require(\\n            mintCounter[buyerWalletAddress] + _mintAmount <= maxPerWallet,\\n            \\\"User exceeds max per walletAddress.\\\"\\n        );\\n        mintCounter[buyerWalletAddress] =\\n            mintCounter[buyerWalletAddress] +\\n            _mintAmount;\\n        require(supply + _mintAmount <= maxSupply, \\\"SOLD OUT.\\\");\\n\\n        if (buyerWalletAddress != owner()) {\\n            if (payMethod) {\\n                require(\\n                    msg.value >= cost * _mintAmount,\\n                    \\\"Insufficient funds to mint.\\\"\\n                );\\n            } else {\\n                uint256 usdtAmount = getUsdtAmount();\\n                require(\\n                    IERC20(USDT).allowance(msg.sender, address(this)) >=\\n                        usdtAmount * _mintAmount,\\n                    \\\"Invalid Allow\\\"\\n                );\\n                IERC20(USDT).safeTransfer(address(this), usdtAmount * _mintAmount);\\n            }\\n        }\\n\\n        if (wlStage) {\\n            require(isAddressWL(buyerWalletAddress), \\\"Not whitelisted\\\");\\n        }\\n\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            _safeMint(buyerWalletAddress, supply + i);\\n        }\\n    }\\n\\n    function walletOfOwner(\\n        address _owner\\n    ) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (revealed == false) {\\n            return notRevealedUri;\\n        }\\n\\n        string memory currentBaseURI = _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        currentBaseURI,\\n                        tokenId.toString(),\\n                        baseExtension\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    //only owner\\n    function reveal() public onlyOwner {\\n        revealed = true;\\n    }\\n\\n    function setCost(uint256 _newCost) public onlyOwner {\\n        cost = _newCost;\\n    }\\n\\n    function setMaxPerWallet(uint256 _newMaxPerWallet) public onlyOwner {\\n        maxPerWallet = _newMaxPerWallet;\\n    }\\n\\n    function setMaxMintAmount(uint256 _newMaxMintAmount) public onlyOwner {\\n        maxMintAmount = _newMaxMintAmount;\\n    }\\n\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n        notRevealedUri = _notRevealedURI;\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setBaseExtension(\\n        string memory _newBaseExtension\\n    ) public onlyOwner {\\n        baseExtension = _newBaseExtension;\\n    }\\n\\n    function pause(bool _state) public onlyOwner {\\n        paused = _state;\\n    }\\n\\n    function setWLStage(bool _state) public onlyOwner {\\n        wlStage = _state;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(os);\\n    }\\n}\\n\",\"keccak256\":\"0xbec9b889a7ce1b963f0271caf1b191c8f91813c89bb98f5307e8c3483b57f695\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6001600e5560c06040526005608081905264173539b7b760d91b60a09081526200002d91601091906200036c565b5067016345785d8a00006011556108ae601255600460138190556014556015805463010000006201000062ffffff199092169190911763ff000000191617600160201b600160c01b03191677ba62bcfcaafc6622853cca2be6ac7d845bc0f2dc00000000179055348015620000a157600080fd5b5060405162003ccb38038062003ccb833981016040819052620000c491620004c5565b835184908490620000dd9060009060208501906200036c565b508051620000f39060019060208401906200036c565b505050620001106200010a620001b760201b60201c565b620001bb565b6200013273713aaeb4e7aa375343ea039c71d01790958cb26d6103e86200020d565b6200013d82620002cd565b6200014881620002f0565b600d80546001600160a01b03191673d4a33860578de61dbabdc8bfdb98fd742fa7028e17905560186200017a6200030f565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055506200068292505050565b3390565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002176200031e565b6001600160601b0316816001600160601b03161115620002545760405162461bcd60e51b81526004016200024b90620005ae565b60405180910390fd5b6001600160a01b0382166200027d5760405162461bcd60e51b81526004016200024b90620005f8565b604080518082019091526001600160a01b039283168082526001600160601b03929092166020909101819052600a80546001600160a01b031916909217909216600160a01b909202919091179055565b620002d762000324565b8051620002ec90600f9060208401906200036c565b5050565b620002fa62000324565b8051620002ec9060169060208401906200036c565b600c546001600160a01b031690565b61271090565b6200032e620001b7565b6001600160a01b0316620003416200030f565b6001600160a01b0316146200036a5760405162461bcd60e51b81526004016200024b9062000579565b565b8280546200037a906200062f565b90600052602060002090601f0160209004810192826200039e5760008555620003e9565b82601f10620003b957805160ff1916838001178555620003e9565b82800160010185558215620003e9579182015b82811115620003e9578251825591602001919060010190620003cc565b50620003f7929150620003fb565b5090565b5b80821115620003f75760008155600101620003fc565b600082601f83011262000423578081fd5b81516001600160401b03808211156200044057620004406200066c565b604051601f8301601f19908116603f011681019082821181831017156200046b576200046b6200066c565b8160405283815260209250868385880101111562000487578485fd5b8491505b83821015620004aa57858201830151818301840152908201906200048b565b83821115620004bb57848385830101525b9695505050505050565b60008060008060808587031215620004db578384fd5b84516001600160401b0380821115620004f2578586fd5b620005008883890162000412565b9550602087015191508082111562000516578485fd5b620005248883890162000412565b945060408701519150808211156200053a578384fd5b620005488883890162000412565b935060608701519150808211156200055e578283fd5b506200056d8782880162000412565b91505092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b60208082526019908201527f455243323938313a20696e76616c696420726563656976657200000000000000604082015260600190565b6002810460018216806200064457607f821691505b602082108114156200066657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61363980620006926000396000f3fe6080604052600436106103765760003560e01c806355f804b3116101d1578063aa1b103f11610102578063d5abeb01116100a0578063f2abcabf1161006f578063f2abcabf14610960578063f2c4ce1e14610975578063f2fde38b14610995578063f513a671146109b557610376565b8063d5abeb01146108eb578063da3ef23f14610900578063e268e4d314610920578063e985e9c51461094057610376565b8063c54e44eb116100dc578063c54e44eb1461088c578063c6682862146108a1578063c87b56dd146108b6578063d35cde41146108d657610376565b8063aa1b103f14610837578063b88d4fde1461084c578063badd8dda1461086c57610376565b80638e15f4731161016f578063a0712d6811610149578063a0712d68146107cf578063a1e91a41146107e2578063a22cb46514610802578063a475b5dd1461082257610376565b80638e15f4731461078557806392c12c3d1461079a57806395d89b41146107ba57610376565b80636c0360eb116101ab5780636c0360eb1461072657806370a082311461073b578063715018a61461075b5780638da5cb5b1461077057610376565b806355f804b3146106d15780635c975abb146106f15780636352211e1461070657610376565b80631fd37db3116102ab57806342842e0e11610249578063453c231011610223578063453c2310146106725780634f6ccce71461068757806351830227146106a757806354fd4d50146106bc57610376565b806342842e0e14610605578063438b63001461062557806344a0d68a1461065257610376565b80632a55205a116102855780632a55205a1461058d5780632f745c59146105bb5780633c56b1b3146105db5780633ccfd60b146105f057610376565b80631fd37db314610543578063239c70ae1461055857806323b872dd1461056d57610376565b8063095ea7b3116103185780631551be4a116102f25780631551be4a146104d957806317bd8e5c146104f957806318160ddd1461050e5780631cdce9fe1461052357610376565b8063095ea7b31461047757806313faede61461049757806314fa99a5146104b957610376565b806306fdde031161035457806306fdde03146103f3578063081812fc14610415578063081c8c4414610442578063088a4ed01461045757610376565b806301ffc9a71461037b57806302329a29146103b157806304634d8d146103d3575b600080fd5b34801561038757600080fd5b5061039b6103963660046129f3565b6109ca565b6040516103a89190612ce6565b60405180910390f35b3480156103bd57600080fd5b506103d16103cc3660046129bb565b6109dd565b005b3480156103df57600080fd5b506103d16103ee3660046128d7565b6109ff565b3480156103ff57600080fd5b50610408610a15565b6040516103a89190612cfa565b34801561042157600080fd5b50610435610430366004612a71565b610aa7565b6040516103a89190612c1e565b34801561044e57600080fd5b50610408610ace565b34801561046357600080fd5b506103d1610472366004612a71565b610b5c565b34801561048357600080fd5b506103d16104923660046128ae565b610b69565b3480156104a357600080fd5b506104ac610c0a565b6040516103a89190612cf1565b3480156104c557600080fd5b506103d16104d43660046129bb565b610c10565b3480156104e557600080fd5b5061039b6104f4366004612778565b610c36565b34801561050557600080fd5b5061039b610caf565b34801561051a57600080fd5b506104ac610cb8565b34801561052f57600080fd5b506104ac61053e366004612778565b610cbe565b34801561054f57600080fd5b506104ac610cd0565b34801561056457600080fd5b506104ac610cec565b34801561057957600080fd5b506103d16105883660046127c4565b610cf2565b34801561059957600080fd5b506105ad6105a8366004612aa1565b610d2a565b6040516103a8929190612c89565b3480156105c757600080fd5b506104ac6105d63660046128ae565b610de3565b3480156105e757600080fd5b506104ac610e35565b3480156105fc57600080fd5b506103d1610e3b565b34801561061157600080fd5b506103d16106203660046127c4565b610eb6565b34801561063157600080fd5b50610645610640366004612778565b610ed1565b6040516103a89190612ca2565b34801561065e57600080fd5b506103d161066d366004612a71565b610f8f565b34801561067e57600080fd5b506104ac610f9c565b34801561069357600080fd5b506104ac6106a2366004612a71565b610fa2565b3480156106b357600080fd5b5061039b610ffd565b3480156106c857600080fd5b506104ac61100c565b3480156106dd57600080fd5b506103d16106ec366004612a2b565b611012565b3480156106fd57600080fd5b5061039b61102d565b34801561071257600080fd5b50610435610721366004612a71565b61103b565b34801561073257600080fd5b5061040861106f565b34801561074757600080fd5b506104ac610756366004612778565b61107c565b34801561076757600080fd5b506103d16110c0565b34801561077c57600080fd5b506104356110d4565b34801561079157600080fd5b506104ac6110e3565b3480156107a657600080fd5b506103d16107b53660046129bb565b611177565b3480156107c657600080fd5b50610408611192565b6103d16107dd366004612a71565b6111a1565b3480156107ee57600080fd5b506103d16107fd36600461290d565b611482565b34801561080e57600080fd5b506103d161081d366004612878565b611505565b34801561082e57600080fd5b506103d1611517565b34801561084357600080fd5b506103d1611532565b34801561085857600080fd5b506103d16108673660046127ff565b611542565b34801561087857600080fd5b50610435610887366004612a71565b61157b565b34801561089857600080fd5b506104356115b9565b3480156108ad57600080fd5b506104086115d0565b3480156108c257600080fd5b506104086108d1366004612a71565b6115dd565b3480156108e257600080fd5b506104ac611705565b3480156108f757600080fd5b506104ac611735565b34801561090c57600080fd5b506103d161091b366004612a2b565b61173b565b34801561092c57600080fd5b506103d161093b366004612a71565b611756565b34801561094c57600080fd5b5061039b61095b366004612792565b611763565b34801561096c57600080fd5b5061039b611791565b34801561098157600080fd5b506103d1610990366004612a2b565b6117a1565b3480156109a157600080fd5b506103d16109b0366004612778565b6117bc565b3480156109c157600080fd5b506104ac6117f3565b60006109d5826117fd565b90505b919050565b6109e5611822565b601580549115156101000261ff0019909216919091179055565b610a07611822565b610a118282611861565b5050565b606060008054610a249061355d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a509061355d565b8015610a9d5780601f10610a7257610100808354040283529160200191610a9d565b820191906000526020600020905b815481529060010190602001808311610a8057829003601f168201915b5050505050905090565b6000610ab282611910565b506000908152600460205260409020546001600160a01b031690565b60168054610adb9061355d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b079061355d565b8015610b545780601f10610b2957610100808354040283529160200191610b54565b820191906000526020600020905b815481529060010190602001808311610b3757829003601f168201915b505050505081565b610b64611822565b601355565b6000610b748261103b565b9050806001600160a01b0316836001600160a01b03161415610bb15760405162461bcd60e51b8152600401610ba89061320e565b60405180910390fd5b806001600160a01b0316610bc3611935565b6001600160a01b03161480610bdf5750610bdf8161095b611935565b610bfb5760405162461bcd60e51b8152600401610ba89061324f565b610c058383611939565b505050565b60115481565b610c18611822565b6015805491151563010000000263ff00000019909216919091179055565b6000805b601854811015610ca657826001600160a01b031660188281548110610c6f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610c945760019150506109d8565b80610c9e81613598565b915050610c3a565b50600092915050565b60155460ff1681565b60085490565b60176020526000908152604090205481565b6000610cda610cb8565b601254610ce7919061351a565b905090565b60135481565b610d03610cfd611935565b826119a7565b610d1f5760405162461bcd60e51b8152600401610ba890612d0d565b610c05838383611a06565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610d9f575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6000610da9611b43565b6001600160601b031682602001516001600160601b031686610dcb91906134fb565b610dd591906134db565b915196919550909350505050565b6000610dee8361107c565b8210610e0c5760405162461bcd60e51b8152600401610ba890612d91565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60185490565b610e43611822565b6000610e4d6110d4565b6001600160a01b031647604051610e6390612c1b565b60006040518083038185875af1925050503d8060008114610ea0576040519150601f19603f3d011682016040523d82523d6000602084013e610ea5565b606091505b5050905080610eb357600080fd5b50565b610c0583838360405180602001604052806000815250611542565b60606000610ede8361107c565b905060008167ffffffffffffffff811115610f0957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f32578160200160208202803683370190505b50905060005b82811015610f8757610f4a8582610de3565b828281518110610f6a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610f7f81613598565b915050610f38565b509392505050565b610f97611822565b601155565b60145481565b6000610fac610cb8565b8210610fca5760405162461bcd60e51b8152600401610ba8906132e3565b60088281548110610feb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60155462010000900460ff1681565b600e5481565b61101a611822565b8051610a1190600f906020840190612656565b601554610100900460ff1681565b60008061104783611b49565b90506001600160a01b0381166109d55760405162461bcd60e51b8152600401610ba8906131b4565b600f8054610adb9061355d565b60006001600160a01b0382166110a45760405162461bcd60e51b8152600401610ba890612fe8565b506001600160a01b031660009081526003602052604090205490565b6110c8611822565b6110d26000611b64565b565b600c546001600160a01b031690565b600080600d60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190612ac2565b509194505050505090565b61117f611822565b6015805460ff1916911515919091179055565b606060018054610a249061355d565b60006111ab610cb8565b905060006111b7611935565b601554909150610100900460ff16156111e25760405162461bcd60e51b8152600401610ba890613418565b600083116112025760405162461bcd60e51b8152600401610ba890612f6b565b6013548311156112245760405162461bcd60e51b8152600401610ba890613081565b6014546001600160a01b03821660009081526017602052604090205461124b9085906134c3565b11156112695760405162461bcd60e51b8152600401610ba890613171565b6001600160a01b03811660009081526017602052604090205461128d9084906134c3565b6001600160a01b0382166000908152601760205260409020556012546112b384846134c3565b11156112d15760405162461bcd60e51b8152600401610ba8906131eb565b6112d96110d4565b6001600160a01b0316816001600160a01b03161461141d576015546301000000900460ff1615611335578260115461131191906134fb565b3410156113305760405162461bcd60e51b8152600401610ba890612d5a565b61141d565b600061133f611705565b905061134b84826134fb565b601554604051636eb1769f60e11b81526401000000009091046001600160a01b03169063dd62ed3e906113849033903090600401612c32565b60206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190612a89565b10156113f25760405162461bcd60e51b8152600401610ba890613031565b61141b3061140086846134fb565b60155464010000000090046001600160a01b03169190611bb6565b505b60155460ff161561144d5761143181610c36565b61144d5760405162461bcd60e51b8152600401610ba890613058565b60015b83811161147c5761146a8261146583866134c3565b611c0c565b8061147481613598565b915050611450565b50505050565b61148a611822565b60005b8151811015610a115760188282815181106114b857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806114fd81613598565b91505061148d565b610a11611510611935565b8383611c26565b61151f611822565b6015805462ff0000191662010000179055565b61153a611822565b6110d2611cc9565b61155361154d611935565b836119a7565b61156f5760405162461bcd60e51b8152600401610ba890612d0d565b61147c84848484611cd0565b60006018828154811061159e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b60155464010000000090046001600160a01b031681565b60108054610adb9061355d565b60606115e882611d03565b6116045760405162461bcd60e51b8152600401610ba890613122565b60155462010000900460ff166116a657601680546116219061355d565b80601f016020809104026020016040519081016040528092919081815260200182805461164d9061355d565b801561169a5780601f1061166f5761010080835404028352916020019161169a565b820191906000526020600020905b81548152906001019060200180831161167d57829003601f168201915b505050505090506109d8565b60006116b0611d20565b905060008151116116d057604051806020016040528060008152506116fe565b806116da84611d2f565b60106040516020016116ee93929190612b59565b6040516020818303038152906040525b9392505050565b6000806117106110e3565b90506305f5e1008160115461172591906134fb565b61172f91906134db565b91505090565b60125481565b611743611822565b8051610a11906010906020840190612656565b61175e611822565b601455565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6015546301000000900460ff1681565b6117a9611822565b8051610a11906016906020840190612656565b6117c4611822565b6001600160a01b0381166117ea5760405162461bcd60e51b8152600401610ba890612e2e565b610eb381611b64565b6000610ce7610cb8565b60006001600160e01b0319821663152a902d60e11b14806109d557506109d582611dd2565b61182a611935565b6001600160a01b031661183b6110d4565b6001600160a01b0316146110d25760405162461bcd60e51b8152600401610ba8906130ed565b611869611b43565b6001600160601b0316816001600160601b0316111561189a5760405162461bcd60e51b8152600401610ba890613384565b6001600160a01b0382166118c05760405162461bcd60e51b8152600401610ba89061344f565b604080518082019091526001600160a01b039283168082526001600160601b03929092166020909101819052600a80546001600160a01b031916909217909216600160a01b909202919091179055565b61191981611d03565b610eb35760405162461bcd60e51b8152600401610ba8906131b4565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061196e8261103b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119b38361103b565b9050806001600160a01b0316846001600160a01b031614806119da57506119da8185611763565b806119fe5750836001600160a01b03166119f384610aa7565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a198261103b565b6001600160a01b031614611a3f5760405162461bcd60e51b8152600401610ba890612e74565b6001600160a01b038216611a655760405162461bcd60e51b8152600401610ba890612ef0565b611a728383836001611df7565b826001600160a01b0316611a858261103b565b6001600160a01b031614611aab5760405162461bcd60e51b8152600401610ba890612e74565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610c05838383600161147c565b61271090565b6000908152600260205260409020546001600160a01b031690565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c058363a9059cbb60e01b8484604051602401611bd5929190612c89565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611eaa565b610a11828260405180602001604052806000815250611f39565b816001600160a01b0316836001600160a01b03161415611c585760405162461bcd60e51b8152600401610ba890612f34565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611cbc908590612ce6565b60405180910390a3505050565b6000600a55565b611cdb848484611a06565b611ce784848484611f6c565b61147c5760405162461bcd60e51b8152600401610ba890612ddc565b600080611d0f83611b49565b6001600160a01b0316141592915050565b6060600f8054610a249061355d565b60606000611d3c83612087565b600101905060008167ffffffffffffffff811115611d6a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d94576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611dcd57610f87565b611d9e565b60006001600160e01b0319821663780e9d6360e01b14806109d557506109d58261215f565b611e038484848461219f565b6001811115611e245760405162461bcd60e51b8152600401610ba89061332f565b816001600160a01b038516611e4157611e3c81612227565b611e64565b836001600160a01b0316856001600160a01b031614611e6457611e64858261226b565b6001600160a01b038416611e8057611e7b81612308565b611ea3565b846001600160a01b0316846001600160a01b031614611ea357611ea384826123e1565b5050505050565b6000611eff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124259092919063ffffffff16565b805190915015610c055780806020019051810190611f1d91906129d7565b610c055760405162461bcd60e51b8152600401610ba8906133ce565b611f438383612434565b611f506000848484611f6c565b610c055760405162461bcd60e51b8152600401610ba890612ddc565b6000611f80846001600160a01b0316612529565b1561207c57836001600160a01b031663150b7a02611f9c611935565b8786866040518563ffffffff1660e01b8152600401611fbe9493929190612c4c565b602060405180830381600087803b158015611fd857600080fd5b505af1925050508015612008575060408051601f3d908101601f1916820190925261200591810190612a0f565b60015b612062573d808015612036576040519150601f19603f3d011682016040523d82523d6000602084013e61203b565b606091505b50805161205a5760405162461bcd60e51b8152600401610ba890612ddc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506119fe565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106120c65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106120f2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061211057662386f26fc10000830492506010015b6305f5e1008310612128576305f5e100830492506008015b612710831061213c57612710830492506004015b6064831061214e576064830492506002015b600a83106109d55760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061219057506001600160e01b03198216635b5e139f60e01b145b806109d557506109d582612538565b600181111561147c576001600160a01b038416156121e5576001600160a01b038416600090815260036020526040812080548392906121df90849061351a565b90915550505b6001600160a01b0383161561147c576001600160a01b0383166000908152600360205260408120805483929061221c9084906134c3565b909155505050505050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016122788461107c565b612282919061351a565b6000838152600760205260409020549091508082146122d5576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061231a9060019061351a565b6000838152600960205260408120546008805493945090928490811061235057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061237f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806123c557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006123ec8361107c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60606119fe8484600085612551565b6001600160a01b03821661245a5760405162461bcd60e51b8152600401610ba8906130b8565b61246381611d03565b156124805760405162461bcd60e51b8152600401610ba890612eb9565b61248e600083836001611df7565b61249781611d03565b156124b45760405162461bcd60e51b8152600401610ba890612eb9565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610a1160008383600161147c565b6001600160a01b03163b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6060824710156125735760405162461bcd60e51b8152600401610ba890612fa2565b600080866001600160a01b0316858760405161258f9190612b3d565b60006040518083038185875af1925050503d80600081146125cc576040519150601f19603f3d011682016040523d82523d6000602084013e6125d1565b606091505b50915091506125e2878383876125ed565b979650505050505050565b606083156126275782516126205761260485612529565b6126205760405162461bcd60e51b8152600401610ba8906132ac565b50816119fe565b6119fe838381511561263c5781518083602001fd5b8060405162461bcd60e51b8152600401610ba89190612cfa565b8280546126629061355d565b90600052602060002090601f01602090048101928261268457600085556126ca565b82601f1061269d57805160ff19168380011785556126ca565b828001600101855582156126ca579182015b828111156126ca5782518255916020019190600101906126af565b506126d69291506126da565b5090565b5b808211156126d657600081556001016126db565b600067ffffffffffffffff831115612709576127096135c9565b61271c601f8401601f1916602001613486565b905082815283838301111561273057600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146109d857600080fd5b805169ffffffffffffffffffff811681146109d857600080fd5b600060208284031215612789578081fd5b6116fe82612747565b600080604083850312156127a4578081fd5b6127ad83612747565b91506127bb60208401612747565b90509250929050565b6000806000606084860312156127d8578081fd5b6127e184612747565b92506127ef60208501612747565b9150604084013590509250925092565b60008060008060808587031215612814578081fd5b61281d85612747565b935061282b60208601612747565b925060408501359150606085013567ffffffffffffffff81111561284d578182fd5b8501601f8101871361285d578182fd5b61286c878235602084016126ef565b91505092959194509250565b6000806040838503121561288a578182fd5b61289383612747565b915060208301356128a3816135df565b809150509250929050565b600080604083850312156128c0578182fd5b6128c983612747565b946020939093013593505050565b600080604083850312156128e9578182fd5b6128f283612747565b915060208301356001600160601b03811681146128a3578182fd5b6000602080838503121561291f578182fd5b823567ffffffffffffffff80821115612936578384fd5b818501915085601f830112612949578384fd5b81358181111561295b5761295b6135c9565b838102915061296b848301613486565b8181528481019084860184860187018a1015612985578788fd5b8795505b838610156129ae5761299a81612747565b835260019590950194918601918601612989565b5098975050505050505050565b6000602082840312156129cc578081fd5b81356116fe816135df565b6000602082840312156129e8578081fd5b81516116fe816135df565b600060208284031215612a04578081fd5b81356116fe816135ed565b600060208284031215612a20578081fd5b81516116fe816135ed565b600060208284031215612a3c578081fd5b813567ffffffffffffffff811115612a52578182fd5b8201601f81018413612a62578182fd5b6119fe848235602084016126ef565b600060208284031215612a82578081fd5b5035919050565b600060208284031215612a9a578081fd5b5051919050565b60008060408385031215612ab3578182fd5b50508035926020909101359150565b600080600080600060a08688031215612ad9578283fd5b612ae28661275e565b9450602086015193506040860151925060608601519150612b056080870161275e565b90509295509295909350565b60008151808452612b29816020860160208601613531565b601f01601f19169290920160200192915050565b60008251612b4f818460208701613531565b9190910192915050565b600084516020612b6c8285838a01613531565b855191840191612b7f8184848a01613531565b8554920191839060028104600180831680612b9b57607f831692505b858310811415612bb957634e487b7160e01b88526022600452602488fd5b808015612bcd5760018114612bde57612c0a565b60ff19851688528388019550612c0a565b612be78b6134b7565b895b85811015612c025781548a820152908401908801612be9565b505083880195505b50939b9a5050505050505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c7f90830184612b11565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612cda57835183529284019291840191600101612cbe565b50909695505050505050565b901515815260200190565b90815260200190565b6000602082526116fe6020830184612b11565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601b908201527f496e73756666696369656e742066756e647320746f206d696e742e0000000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252601c908201527f4d696e7420616d6f756e74206d7573742062652061626f766520302e00000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526029908201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616040820152683634b21037bbb732b960b91b606082015260800190565b6020808252600d908201526c496e76616c696420416c6c6f7760981b604082015260600190565b6020808252600f908201526e139bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526018908201527f557365722065786365656473206d6178207065722054582e0000000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526023908201527f557365722065786365656473206d6178207065722077616c6c6574416464726560408201526239b99760e91b606082015260800190565b60208082526018908201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604082015260600190565b60208082526009908201526829a7a6221027aaaa1760b91b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252603d908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60408201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526035908201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604082015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b606082015260800190565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526019908201527f4d696e742069732063757272656e746c79207061757365642e00000000000000604082015260600190565b60208082526019908201527f455243323938313a20696e76616c696420726563656976657200000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156134af576134af6135c9565b604052919050565b60009081526020902090565b600082198211156134d6576134d66135b3565b500190565b6000826134f657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613515576135156135b3565b500290565b60008282101561352c5761352c6135b3565b500390565b60005b8381101561354c578181015183820152602001613534565b8381111561147c5750506000910152565b60028104600182168061357157607f821691505b6020821081141561359257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156135ac576135ac6135b3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610eb357600080fd5b6001600160e01b031981168114610eb357600080fdfea26469706673582212207193ccfa8640e08f3999107fe11f46587aed9fd489384db8f49baec602f02e2464736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106103765760003560e01c806355f804b3116101d1578063aa1b103f11610102578063d5abeb01116100a0578063f2abcabf1161006f578063f2abcabf14610960578063f2c4ce1e14610975578063f2fde38b14610995578063f513a671146109b557610376565b8063d5abeb01146108eb578063da3ef23f14610900578063e268e4d314610920578063e985e9c51461094057610376565b8063c54e44eb116100dc578063c54e44eb1461088c578063c6682862146108a1578063c87b56dd146108b6578063d35cde41146108d657610376565b8063aa1b103f14610837578063b88d4fde1461084c578063badd8dda1461086c57610376565b80638e15f4731161016f578063a0712d6811610149578063a0712d68146107cf578063a1e91a41146107e2578063a22cb46514610802578063a475b5dd1461082257610376565b80638e15f4731461078557806392c12c3d1461079a57806395d89b41146107ba57610376565b80636c0360eb116101ab5780636c0360eb1461072657806370a082311461073b578063715018a61461075b5780638da5cb5b1461077057610376565b806355f804b3146106d15780635c975abb146106f15780636352211e1461070657610376565b80631fd37db3116102ab57806342842e0e11610249578063453c231011610223578063453c2310146106725780634f6ccce71461068757806351830227146106a757806354fd4d50146106bc57610376565b806342842e0e14610605578063438b63001461062557806344a0d68a1461065257610376565b80632a55205a116102855780632a55205a1461058d5780632f745c59146105bb5780633c56b1b3146105db5780633ccfd60b146105f057610376565b80631fd37db314610543578063239c70ae1461055857806323b872dd1461056d57610376565b8063095ea7b3116103185780631551be4a116102f25780631551be4a146104d957806317bd8e5c146104f957806318160ddd1461050e5780631cdce9fe1461052357610376565b8063095ea7b31461047757806313faede61461049757806314fa99a5146104b957610376565b806306fdde031161035457806306fdde03146103f3578063081812fc14610415578063081c8c4414610442578063088a4ed01461045757610376565b806301ffc9a71461037b57806302329a29146103b157806304634d8d146103d3575b600080fd5b34801561038757600080fd5b5061039b6103963660046129f3565b6109ca565b6040516103a89190612ce6565b60405180910390f35b3480156103bd57600080fd5b506103d16103cc3660046129bb565b6109dd565b005b3480156103df57600080fd5b506103d16103ee3660046128d7565b6109ff565b3480156103ff57600080fd5b50610408610a15565b6040516103a89190612cfa565b34801561042157600080fd5b50610435610430366004612a71565b610aa7565b6040516103a89190612c1e565b34801561044e57600080fd5b50610408610ace565b34801561046357600080fd5b506103d1610472366004612a71565b610b5c565b34801561048357600080fd5b506103d16104923660046128ae565b610b69565b3480156104a357600080fd5b506104ac610c0a565b6040516103a89190612cf1565b3480156104c557600080fd5b506103d16104d43660046129bb565b610c10565b3480156104e557600080fd5b5061039b6104f4366004612778565b610c36565b34801561050557600080fd5b5061039b610caf565b34801561051a57600080fd5b506104ac610cb8565b34801561052f57600080fd5b506104ac61053e366004612778565b610cbe565b34801561054f57600080fd5b506104ac610cd0565b34801561056457600080fd5b506104ac610cec565b34801561057957600080fd5b506103d16105883660046127c4565b610cf2565b34801561059957600080fd5b506105ad6105a8366004612aa1565b610d2a565b6040516103a8929190612c89565b3480156105c757600080fd5b506104ac6105d63660046128ae565b610de3565b3480156105e757600080fd5b506104ac610e35565b3480156105fc57600080fd5b506103d1610e3b565b34801561061157600080fd5b506103d16106203660046127c4565b610eb6565b34801561063157600080fd5b50610645610640366004612778565b610ed1565b6040516103a89190612ca2565b34801561065e57600080fd5b506103d161066d366004612a71565b610f8f565b34801561067e57600080fd5b506104ac610f9c565b34801561069357600080fd5b506104ac6106a2366004612a71565b610fa2565b3480156106b357600080fd5b5061039b610ffd565b3480156106c857600080fd5b506104ac61100c565b3480156106dd57600080fd5b506103d16106ec366004612a2b565b611012565b3480156106fd57600080fd5b5061039b61102d565b34801561071257600080fd5b50610435610721366004612a71565b61103b565b34801561073257600080fd5b5061040861106f565b34801561074757600080fd5b506104ac610756366004612778565b61107c565b34801561076757600080fd5b506103d16110c0565b34801561077c57600080fd5b506104356110d4565b34801561079157600080fd5b506104ac6110e3565b3480156107a657600080fd5b506103d16107b53660046129bb565b611177565b3480156107c657600080fd5b50610408611192565b6103d16107dd366004612a71565b6111a1565b3480156107ee57600080fd5b506103d16107fd36600461290d565b611482565b34801561080e57600080fd5b506103d161081d366004612878565b611505565b34801561082e57600080fd5b506103d1611517565b34801561084357600080fd5b506103d1611532565b34801561085857600080fd5b506103d16108673660046127ff565b611542565b34801561087857600080fd5b50610435610887366004612a71565b61157b565b34801561089857600080fd5b506104356115b9565b3480156108ad57600080fd5b506104086115d0565b3480156108c257600080fd5b506104086108d1366004612a71565b6115dd565b3480156108e257600080fd5b506104ac611705565b3480156108f757600080fd5b506104ac611735565b34801561090c57600080fd5b506103d161091b366004612a2b565b61173b565b34801561092c57600080fd5b506103d161093b366004612a71565b611756565b34801561094c57600080fd5b5061039b61095b366004612792565b611763565b34801561096c57600080fd5b5061039b611791565b34801561098157600080fd5b506103d1610990366004612a2b565b6117a1565b3480156109a157600080fd5b506103d16109b0366004612778565b6117bc565b3480156109c157600080fd5b506104ac6117f3565b60006109d5826117fd565b90505b919050565b6109e5611822565b601580549115156101000261ff0019909216919091179055565b610a07611822565b610a118282611861565b5050565b606060008054610a249061355d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a509061355d565b8015610a9d5780601f10610a7257610100808354040283529160200191610a9d565b820191906000526020600020905b815481529060010190602001808311610a8057829003601f168201915b5050505050905090565b6000610ab282611910565b506000908152600460205260409020546001600160a01b031690565b60168054610adb9061355d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b079061355d565b8015610b545780601f10610b2957610100808354040283529160200191610b54565b820191906000526020600020905b815481529060010190602001808311610b3757829003601f168201915b505050505081565b610b64611822565b601355565b6000610b748261103b565b9050806001600160a01b0316836001600160a01b03161415610bb15760405162461bcd60e51b8152600401610ba89061320e565b60405180910390fd5b806001600160a01b0316610bc3611935565b6001600160a01b03161480610bdf5750610bdf8161095b611935565b610bfb5760405162461bcd60e51b8152600401610ba89061324f565b610c058383611939565b505050565b60115481565b610c18611822565b6015805491151563010000000263ff00000019909216919091179055565b6000805b601854811015610ca657826001600160a01b031660188281548110610c6f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610c945760019150506109d8565b80610c9e81613598565b915050610c3a565b50600092915050565b60155460ff1681565b60085490565b60176020526000908152604090205481565b6000610cda610cb8565b601254610ce7919061351a565b905090565b60135481565b610d03610cfd611935565b826119a7565b610d1f5760405162461bcd60e51b8152600401610ba890612d0d565b610c05838383611a06565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610d9f575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6000610da9611b43565b6001600160601b031682602001516001600160601b031686610dcb91906134fb565b610dd591906134db565b915196919550909350505050565b6000610dee8361107c565b8210610e0c5760405162461bcd60e51b8152600401610ba890612d91565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60185490565b610e43611822565b6000610e4d6110d4565b6001600160a01b031647604051610e6390612c1b565b60006040518083038185875af1925050503d8060008114610ea0576040519150601f19603f3d011682016040523d82523d6000602084013e610ea5565b606091505b5050905080610eb357600080fd5b50565b610c0583838360405180602001604052806000815250611542565b60606000610ede8361107c565b905060008167ffffffffffffffff811115610f0957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f32578160200160208202803683370190505b50905060005b82811015610f8757610f4a8582610de3565b828281518110610f6a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610f7f81613598565b915050610f38565b509392505050565b610f97611822565b601155565b60145481565b6000610fac610cb8565b8210610fca5760405162461bcd60e51b8152600401610ba8906132e3565b60088281548110610feb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60155462010000900460ff1681565b600e5481565b61101a611822565b8051610a1190600f906020840190612656565b601554610100900460ff1681565b60008061104783611b49565b90506001600160a01b0381166109d55760405162461bcd60e51b8152600401610ba8906131b4565b600f8054610adb9061355d565b60006001600160a01b0382166110a45760405162461bcd60e51b8152600401610ba890612fe8565b506001600160a01b031660009081526003602052604090205490565b6110c8611822565b6110d26000611b64565b565b600c546001600160a01b031690565b600080600d60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190612ac2565b509194505050505090565b61117f611822565b6015805460ff1916911515919091179055565b606060018054610a249061355d565b60006111ab610cb8565b905060006111b7611935565b601554909150610100900460ff16156111e25760405162461bcd60e51b8152600401610ba890613418565b600083116112025760405162461bcd60e51b8152600401610ba890612f6b565b6013548311156112245760405162461bcd60e51b8152600401610ba890613081565b6014546001600160a01b03821660009081526017602052604090205461124b9085906134c3565b11156112695760405162461bcd60e51b8152600401610ba890613171565b6001600160a01b03811660009081526017602052604090205461128d9084906134c3565b6001600160a01b0382166000908152601760205260409020556012546112b384846134c3565b11156112d15760405162461bcd60e51b8152600401610ba8906131eb565b6112d96110d4565b6001600160a01b0316816001600160a01b03161461141d576015546301000000900460ff1615611335578260115461131191906134fb565b3410156113305760405162461bcd60e51b8152600401610ba890612d5a565b61141d565b600061133f611705565b905061134b84826134fb565b601554604051636eb1769f60e11b81526401000000009091046001600160a01b03169063dd62ed3e906113849033903090600401612c32565b60206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190612a89565b10156113f25760405162461bcd60e51b8152600401610ba890613031565b61141b3061140086846134fb565b60155464010000000090046001600160a01b03169190611bb6565b505b60155460ff161561144d5761143181610c36565b61144d5760405162461bcd60e51b8152600401610ba890613058565b60015b83811161147c5761146a8261146583866134c3565b611c0c565b8061147481613598565b915050611450565b50505050565b61148a611822565b60005b8151811015610a115760188282815181106114b857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806114fd81613598565b91505061148d565b610a11611510611935565b8383611c26565b61151f611822565b6015805462ff0000191662010000179055565b61153a611822565b6110d2611cc9565b61155361154d611935565b836119a7565b61156f5760405162461bcd60e51b8152600401610ba890612d0d565b61147c84848484611cd0565b60006018828154811061159e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b60155464010000000090046001600160a01b031681565b60108054610adb9061355d565b60606115e882611d03565b6116045760405162461bcd60e51b8152600401610ba890613122565b60155462010000900460ff166116a657601680546116219061355d565b80601f016020809104026020016040519081016040528092919081815260200182805461164d9061355d565b801561169a5780601f1061166f5761010080835404028352916020019161169a565b820191906000526020600020905b81548152906001019060200180831161167d57829003601f168201915b505050505090506109d8565b60006116b0611d20565b905060008151116116d057604051806020016040528060008152506116fe565b806116da84611d2f565b60106040516020016116ee93929190612b59565b6040516020818303038152906040525b9392505050565b6000806117106110e3565b90506305f5e1008160115461172591906134fb565b61172f91906134db565b91505090565b60125481565b611743611822565b8051610a11906010906020840190612656565b61175e611822565b601455565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6015546301000000900460ff1681565b6117a9611822565b8051610a11906016906020840190612656565b6117c4611822565b6001600160a01b0381166117ea5760405162461bcd60e51b8152600401610ba890612e2e565b610eb381611b64565b6000610ce7610cb8565b60006001600160e01b0319821663152a902d60e11b14806109d557506109d582611dd2565b61182a611935565b6001600160a01b031661183b6110d4565b6001600160a01b0316146110d25760405162461bcd60e51b8152600401610ba8906130ed565b611869611b43565b6001600160601b0316816001600160601b0316111561189a5760405162461bcd60e51b8152600401610ba890613384565b6001600160a01b0382166118c05760405162461bcd60e51b8152600401610ba89061344f565b604080518082019091526001600160a01b039283168082526001600160601b03929092166020909101819052600a80546001600160a01b031916909217909216600160a01b909202919091179055565b61191981611d03565b610eb35760405162461bcd60e51b8152600401610ba8906131b4565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061196e8261103b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119b38361103b565b9050806001600160a01b0316846001600160a01b031614806119da57506119da8185611763565b806119fe5750836001600160a01b03166119f384610aa7565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a198261103b565b6001600160a01b031614611a3f5760405162461bcd60e51b8152600401610ba890612e74565b6001600160a01b038216611a655760405162461bcd60e51b8152600401610ba890612ef0565b611a728383836001611df7565b826001600160a01b0316611a858261103b565b6001600160a01b031614611aab5760405162461bcd60e51b8152600401610ba890612e74565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610c05838383600161147c565b61271090565b6000908152600260205260409020546001600160a01b031690565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610c058363a9059cbb60e01b8484604051602401611bd5929190612c89565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611eaa565b610a11828260405180602001604052806000815250611f39565b816001600160a01b0316836001600160a01b03161415611c585760405162461bcd60e51b8152600401610ba890612f34565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611cbc908590612ce6565b60405180910390a3505050565b6000600a55565b611cdb848484611a06565b611ce784848484611f6c565b61147c5760405162461bcd60e51b8152600401610ba890612ddc565b600080611d0f83611b49565b6001600160a01b0316141592915050565b6060600f8054610a249061355d565b60606000611d3c83612087565b600101905060008167ffffffffffffffff811115611d6a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d94576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611dcd57610f87565b611d9e565b60006001600160e01b0319821663780e9d6360e01b14806109d557506109d58261215f565b611e038484848461219f565b6001811115611e245760405162461bcd60e51b8152600401610ba89061332f565b816001600160a01b038516611e4157611e3c81612227565b611e64565b836001600160a01b0316856001600160a01b031614611e6457611e64858261226b565b6001600160a01b038416611e8057611e7b81612308565b611ea3565b846001600160a01b0316846001600160a01b031614611ea357611ea384826123e1565b5050505050565b6000611eff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124259092919063ffffffff16565b805190915015610c055780806020019051810190611f1d91906129d7565b610c055760405162461bcd60e51b8152600401610ba8906133ce565b611f438383612434565b611f506000848484611f6c565b610c055760405162461bcd60e51b8152600401610ba890612ddc565b6000611f80846001600160a01b0316612529565b1561207c57836001600160a01b031663150b7a02611f9c611935565b8786866040518563ffffffff1660e01b8152600401611fbe9493929190612c4c565b602060405180830381600087803b158015611fd857600080fd5b505af1925050508015612008575060408051601f3d908101601f1916820190925261200591810190612a0f565b60015b612062573d808015612036576040519150601f19603f3d011682016040523d82523d6000602084013e61203b565b606091505b50805161205a5760405162461bcd60e51b8152600401610ba890612ddc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506119fe565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106120c65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106120f2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061211057662386f26fc10000830492506010015b6305f5e1008310612128576305f5e100830492506008015b612710831061213c57612710830492506004015b6064831061214e576064830492506002015b600a83106109d55760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061219057506001600160e01b03198216635b5e139f60e01b145b806109d557506109d582612538565b600181111561147c576001600160a01b038416156121e5576001600160a01b038416600090815260036020526040812080548392906121df90849061351a565b90915550505b6001600160a01b0383161561147c576001600160a01b0383166000908152600360205260408120805483929061221c9084906134c3565b909155505050505050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016122788461107c565b612282919061351a565b6000838152600760205260409020549091508082146122d5576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061231a9060019061351a565b6000838152600960205260408120546008805493945090928490811061235057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061237f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806123c557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006123ec8361107c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60606119fe8484600085612551565b6001600160a01b03821661245a5760405162461bcd60e51b8152600401610ba8906130b8565b61246381611d03565b156124805760405162461bcd60e51b8152600401610ba890612eb9565b61248e600083836001611df7565b61249781611d03565b156124b45760405162461bcd60e51b8152600401610ba890612eb9565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610a1160008383600161147c565b6001600160a01b03163b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6060824710156125735760405162461bcd60e51b8152600401610ba890612fa2565b600080866001600160a01b0316858760405161258f9190612b3d565b60006040518083038185875af1925050503d80600081146125cc576040519150601f19603f3d011682016040523d82523d6000602084013e6125d1565b606091505b50915091506125e2878383876125ed565b979650505050505050565b606083156126275782516126205761260485612529565b6126205760405162461bcd60e51b8152600401610ba8906132ac565b50816119fe565b6119fe838381511561263c5781518083602001fd5b8060405162461bcd60e51b8152600401610ba89190612cfa565b8280546126629061355d565b90600052602060002090601f01602090048101928261268457600085556126ca565b82601f1061269d57805160ff19168380011785556126ca565b828001600101855582156126ca579182015b828111156126ca5782518255916020019190600101906126af565b506126d69291506126da565b5090565b5b808211156126d657600081556001016126db565b600067ffffffffffffffff831115612709576127096135c9565b61271c601f8401601f1916602001613486565b905082815283838301111561273057600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146109d857600080fd5b805169ffffffffffffffffffff811681146109d857600080fd5b600060208284031215612789578081fd5b6116fe82612747565b600080604083850312156127a4578081fd5b6127ad83612747565b91506127bb60208401612747565b90509250929050565b6000806000606084860312156127d8578081fd5b6127e184612747565b92506127ef60208501612747565b9150604084013590509250925092565b60008060008060808587031215612814578081fd5b61281d85612747565b935061282b60208601612747565b925060408501359150606085013567ffffffffffffffff81111561284d578182fd5b8501601f8101871361285d578182fd5b61286c878235602084016126ef565b91505092959194509250565b6000806040838503121561288a578182fd5b61289383612747565b915060208301356128a3816135df565b809150509250929050565b600080604083850312156128c0578182fd5b6128c983612747565b946020939093013593505050565b600080604083850312156128e9578182fd5b6128f283612747565b915060208301356001600160601b03811681146128a3578182fd5b6000602080838503121561291f578182fd5b823567ffffffffffffffff80821115612936578384fd5b818501915085601f830112612949578384fd5b81358181111561295b5761295b6135c9565b838102915061296b848301613486565b8181528481019084860184860187018a1015612985578788fd5b8795505b838610156129ae5761299a81612747565b835260019590950194918601918601612989565b5098975050505050505050565b6000602082840312156129cc578081fd5b81356116fe816135df565b6000602082840312156129e8578081fd5b81516116fe816135df565b600060208284031215612a04578081fd5b81356116fe816135ed565b600060208284031215612a20578081fd5b81516116fe816135ed565b600060208284031215612a3c578081fd5b813567ffffffffffffffff811115612a52578182fd5b8201601f81018413612a62578182fd5b6119fe848235602084016126ef565b600060208284031215612a82578081fd5b5035919050565b600060208284031215612a9a578081fd5b5051919050565b60008060408385031215612ab3578182fd5b50508035926020909101359150565b600080600080600060a08688031215612ad9578283fd5b612ae28661275e565b9450602086015193506040860151925060608601519150612b056080870161275e565b90509295509295909350565b60008151808452612b29816020860160208601613531565b601f01601f19169290920160200192915050565b60008251612b4f818460208701613531565b9190910192915050565b600084516020612b6c8285838a01613531565b855191840191612b7f8184848a01613531565b8554920191839060028104600180831680612b9b57607f831692505b858310811415612bb957634e487b7160e01b88526022600452602488fd5b808015612bcd5760018114612bde57612c0a565b60ff19851688528388019550612c0a565b612be78b6134b7565b895b85811015612c025781548a820152908401908801612be9565b505083880195505b50939b9a5050505050505050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c7f90830184612b11565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612cda57835183529284019291840191600101612cbe565b50909695505050505050565b901515815260200190565b90815260200190565b6000602082526116fe6020830184612b11565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601b908201527f496e73756666696369656e742066756e647320746f206d696e742e0000000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252601c908201527f4d696e7420616d6f756e74206d7573742062652061626f766520302e00000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526029908201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616040820152683634b21037bbb732b960b91b606082015260800190565b6020808252600d908201526c496e76616c696420416c6c6f7760981b604082015260600190565b6020808252600f908201526e139bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526018908201527f557365722065786365656473206d6178207065722054582e0000000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526023908201527f557365722065786365656473206d6178207065722077616c6c6574416464726560408201526239b99760e91b606082015260800190565b60208082526018908201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604082015260600190565b60208082526009908201526829a7a6221027aaaa1760b91b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252603d908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60408201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526035908201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604082015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b606082015260800190565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526019908201527f4d696e742069732063757272656e746c79207061757365642e00000000000000604082015260600190565b60208082526019908201527f455243323938313a20696e76616c696420726563656976657200000000000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156134af576134af6135c9565b604052919050565b60009081526020902090565b600082198211156134d6576134d66135b3565b500190565b6000826134f657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613515576135156135b3565b500290565b60008282101561352c5761352c6135b3565b500390565b60005b8381101561354c578181015183820152602001613534565b8381111561147c5750506000910152565b60028104600182168061357157607f821691505b6020821081141561359257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156135ac576135ac6135b3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610eb357600080fd5b6001600160e01b031981168114610eb357600080fdfea26469706673582212207193ccfa8640e08f3999107fe11f46587aed9fd489384db8f49baec602f02e2464736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2177,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2179,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2183,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2187,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2191,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2197,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3108,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3112,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3115,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3119,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3478,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)3475_storage"
      },
      {
        "astId": 3483,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)3475_storage)"
      },
      {
        "astId": 1836,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3678,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "priceFeed",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3681,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "version",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3683,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "baseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3686,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "baseExtension",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3689,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "cost",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3692,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "maxSupply",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3695,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3698,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "maxPerWallet",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3701,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "wlStage",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 3704,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "paused",
        "offset": 1,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 3707,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "revealed",
        "offset": 2,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 3710,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "payMethod",
        "offset": 3,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 3713,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "USDT",
        "offset": 4,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 3715,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      },
      {
        "astId": 3719,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "mintCounter",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3722,
        "contract": "contracts/Mint.sol:CyDreadzMintContract",
        "label": "wlAddresses",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)3475_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)3475_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)3475_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 3472,
            "contract": "contracts/Mint.sol:CyDreadzMintContract",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3474,
            "contract": "contracts/Mint.sol:CyDreadzMintContract",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}